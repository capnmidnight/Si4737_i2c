Note that the VCXPROJ files in the examples directory are meant to be opened in
Microsoft Visual Studio using the Visual Micro plugin (http://www.visualmicro.com/).
However, the INO files should work with the standard Arduino IDE without any
trouble.

My efforts here are to make a cleaner library, an example that demonstrates raw
communicating over I2C to the SI4737 to demonstrate adherence to the programming
manual (https://www.silabs.com/Support%20Documents/TechnicalDocs/AN332.pdf),
and a more complete example that interfaces with some external hardware of a
specific design.

This was originally based on Rickey Wang's I2C library for the Si4737 (https://github.com/rickeywang/Si4737_i2c)
but I couldn't get it to work and ended up writing my own complete library in
the process of debugging.

The sketch in the INO file expects some additions:

- Install DSS Circuit's I2C Master library (http://dsscircuits.com/articles/86-articles/66-arduino-i2c-master-library)
The Wire library that comes with Arduino for I2C communication is buggy and will
lock up after a few hundred API calls. I've included the ZIP file for REV5 of
the library in the repository for convenience.
- Connect "V5" of the 3.3v Arduino to the SI chip's VDD (21) and VIO (20) pins
as well as to a 20nF capacitor connected to the DBYP (22) pin.
- Connect all SI chip's GND (13, 14), SEN (16), P10, P11, and RFGND (9) to the
Arduino's ground.
- Connect Arduino pins D4 - D7 to thumbwheel array's bit read pins, in
reverse order. If you don't like to connect them in reverse, redefine DIGIT_BIT_PIN0
through DIGIT_BIT_PIN3 in the INO file to suit.
- Connect Arduino pins D8 - D11 to thumbweel array's digit select pins, also
in reverse order. If you don't like to connect them in reverse, redefine
DIGIT_SEL_PIN0 through DIGIT_SEL_PIN3 in the INO file to suit.
- Connect Arduino pin D2 to SI chip's pin GPIO2/INT (4). This is the interrupt
line that the SI chip uses to indicate it has completed a command.
- Connect Arduino pin D3 to an LED to indicate signal strength as a function
of RSSI (recieved signal strength indicator). The value gets rescaled according
to different rules for FM vs WB. First RSSI gets squared, then multiplied by
255. Finally:
    - in FM mode, the highest value I ever saw was 35. So the squared
    RSSI is divided by 35 squared = 625
    - in WB mode, the highest value I ever saw was 9. So the squared
    RSSI is divided by 9 squared = 81
    - You can change either of these MAX_RSSI_(FM|WB) values in HAL.h
- Connect Arduino pin D12 to an LED to indicate FM mode is active.
- Connect Arduino pin D13 to an LED to indicate WB mode is active.
- Connect Arduino pin A0 to SI chip's RESET pin. Control of the reset pin
is necessary to power the chip correctly.
- Connect the I2C bus:
    - Arduino pin A4 to SI chip's SDIO pin (18)
    - Arduion pin A5 to SI chip's SCLK pin (17)
- Connect a 32.768 KHz crystal across SI chip's DCLK (3) and RCLK (19) pins
- Connect 22 pF capacitors from both SI chip's DCLK pin and RCLK pin
to ground.
- Connect the antenna to the SI chip's FMI pin (8).
- Connect the SI chip's LOUT pin (24) and ROUT pin (23) to the stereo audio
amplifier.
